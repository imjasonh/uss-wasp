{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "plugins": ["@typescript-eslint"],
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "rules": {
    // TypeScript specific rules - strict mode
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/explicit-member-accessibility": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/no-unsafe-assignment": "error",
    "@typescript-eslint/no-unsafe-call": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unsafe-return": "error",

    // Code quality rules
    "prefer-const": "error",
    "no-var": "error",
    "no-console": "warn",
    "eqeqeq": ["error", "always"],
    "curly": ["error", "all"],
    "no-duplicate-imports": "error",
    "no-unused-expressions": "error",
    "no-use-before-define": "error",
    "consistent-return": "error",
    "default-case": "error",
    "no-fallthrough": "error",
    "no-return-assign": "error",
    "no-throw-literal": "error",
    "no-unneeded-ternary": "error",
    "no-useless-return": "error",
    "prefer-arrow-callback": "error",
    "prefer-template": "error",
    "yoda": "error",

    // Best practices
    "array-callback-return": "error",
    "block-scoped-var": "error",
    "complexity": ["warn", 10],
    "max-depth": ["warn", 4],
    "max-lines-per-function": ["warn", { "max": 50, "skipComments": true }],
    "max-params": ["warn", 4],
    "no-empty-function": "error",
    "no-magic-numbers": ["warn", { "ignore": [0, 1, -1] }],
    "no-nested-ternary": "error",
    "no-param-reassign": "error"
  },
  "env": {
    "node": true,
    "es2022": true,
    "jest": true
  },
  "overrides": [
    {
      "files": ["**/*.test.ts", "**/*.spec.ts", "**/tests/**/*.ts", "**/testing/**/*.ts"],
      "rules": {
        "@typescript-eslint/unbound-method": "off",
        "no-console": "off",
        "max-lines-per-function": "off",
        "complexity": "off",
        "max-depth": "off",
        "max-params": "off",
        "no-magic-numbers": "off"
      }
    }
  ],
  "ignorePatterns": ["dist/**/*", "node_modules/**/*", "coverage/**/*", "*.js"]
}
